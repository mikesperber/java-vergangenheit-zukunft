#+title: Hätte, hätte Fahrradkette
#+author: Falk Sippach, Mike Sperber
#+REVEAL_PLUGINS: (notes)
#+REVEAL_THEME: ./css/themes/active.css
#+REVEAL_HLEVEL: 1
#+REVEAL_TRANS: none
#+OPTIONS: toc:nil reveal-center:f H:4

* Falk Sippach

Softwarearchitekt bei embarc
Organisator von ...


* Mike Sperber

Geschäftsführer bei active group
...

* Hätte, hätte Fahrradkette

Warum sind wir hier?


* Generics

#+begin_src java
#+end_src

* Strachey

[[file:images/parametric-polymorphism.png]]

* Stream API

#+begin_src java
list.stream().map().toList();
#+end_src

** subslide

* Lambdas

* Optional

* Modulsystem

* List.of() (unmodifiable)

* Local variable type inference

* switch expressions

* Records

* Type Patterns

* Sealed Classes

* Pattern-Matching in switch

* virtual threads

* structured concurrency

* record patterns

* scoped values

* string templates (inzwischen wieder abgeschafft)

* sequenced collections

* unnamed patterns, variables

* statements before super

* stream gatherers

* implicitly declared classes, instance main methods

* primitive types in patterns

* flexible constructor bodies (cf. statements before super)

* module import

* value types

* nullable types


* Diagrams!

Writing PlantUML code to get nice images.

#+begin_src plantuml :file plantuml/output/dia.png
@startuml
[*] --> State1
State1 --> [*]
State1 : this is a string
State1 : this is another string

State1 -> State2
State2 --> [*]
@enduml
#+end_src

* C4 diagrams

C4 container diagrams are also possible.

#+begin_src plantuml :file plantuml/output/c4.png
@startuml
!include plantuml/plugins/C4_Container.puml

Container(client, "web client")
Container(server, "web server")
Rel(client, server, "talks to")

@enduml
#+end_src

* Vielen Dank
Fragen
