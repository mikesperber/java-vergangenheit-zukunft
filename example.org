#+title: Hätte, hätte Fahrradkette
#+author: Falk Sippach, Mike Sperber
#+REVEAL_PLUGINS: (notes)
#+REVEAL_THEME: ./css/themes/active.css
#+REVEAL_HLEVEL: 1
#+REVEAL_TRANS: none
#+OPTIONS: num:nil toc:nil reveal-center:f H:4

* Falk Sippach

#+ATTR_HTML: :height 100px;
[[file:images/falk.jpg]]

Softwarearchitekt bei embarc

✉️falk.sippach@embarc.de

#+ATTR_HTML: :height 50px;
[[file:images/embarc.svg][file:images/embarc.svg]]

- Trainer für iSAQB Foundation und Advanced
- (Co-)Organisator von JUG Darmstadt, CyberLand, SpeaKonf, Tech2Talk
- JavaLand, Java Forum Nord, XP-Days, ...

* Mike Sperber

Active Group GmbH

=@sperbsen@discuss.systems=

[[file:images/mike.jpg]]

* Active Group GmbH

#+ATTR_HTML: :height 100px;
[[file:images/ag-logo-plain.png][file:images/ag-logo-plain.png]]
- Tübingen
- Projektentwicklung, Beratung, Training
- Scala, Clojure, F#, Haskell, OCaml, Erlang, Elixir, Swift
- iSABQ Foundation, FUNAR, FLEX, DSL

Blog [[https://funktionale-programmierung.de]]

* BOB 2025

[[file:images/bob_head_2to1.png]]

https://bobkonf.de/

* Warum sind wir hier? (F)
    :PROPERTIES:
    :reveal_background: ./images/fahrradkette.jpg
    :reveal_background_trans: slide
    :reveal_background_opacity: 0.2
    :END:

Java wird 30

#+ATTR_HTML: :class fragment
- Wie ist Java entstanden?
#+ATTR_HTML: :class fragment
- Was ist nicht gut gelöst in Java?
#+ATTR_HTML: :class fragment
- Wie entwickelt es sich gerade weiter?
#+ATTR_HTML: :class fragment
- Was fehlt in Java, was könnte noch kommen?

#+BEGIN_NOTES
https://pixabay.com/de/photos/fahrradkette-verrostet-alt-4788473/
#+END_NOTES

** Abstract

Java ist inzwischen 30 Jahre alt, und hat seit der Geburt viele Features dazubekommen.
Die meisten davon wurden nicht vom JDK-Team erfunden, sondern aus anderen Programmiersprachen und Forschungsarbeiten angepasst übernommen.

Durch die mittlerweile halbjährlichen Releases gibt es aktuell viel Bewegung im Java Ökosystem.
Und die nächste tolle Funktion gibt es höchstwahrscheinlich schon irgendwo da draußen.
Aber wisst Ihr eigentlich, woher die Features der Vergangenheit kommen?
Und können wir vielleicht jetzt schon vorhersehen, was die Zukunft bringen wird?

#+REVEAL: split

Im Vortrag werfen Falk (Java-Enthusiast) und Mike (Experte für Programmiersprachen) einen Blick in die Geschichte und in die Glaskugel:

- Was haben Generics, Lambdas, Streams und Virtual Threads gemeinsam?
- Warum nerven funktionale Programmierer:innen immer wegen der “tail calls”?
- Warum heißen Lambdas so und was fehlt, damit sie richtig toll werden?
- Was sind in Monaden und wo gibt’s die in Java?
- Ist Java mit Lambdas, Stream API und Pattern Matching schon eine funktionale Sprache?
- Ist Kotlin das Java der Zukunft?
- … und noch einiges mehr.


* Meilensteine von Java (F)

- 1995: 1.0
- 2004: 5.0 (Generics)
- 2014: 8 (Lambdas, Stream API, ...)
- 2017: 9 (JPMS, ...)
- 2018: 10 (halbjährliches Releases)
- 2021: 17 (Pattern Matching, ...)
- 2023: 21 (Virtual Threads, ...)

** Warum ist Java immer noch so populär? (F)

- halbjährliche Releases seit Java 10 (2018)
- LTS alle 2 Jahre
- Inkubator und Preview Features
- große Änderungen auf viele Releases verteilt

** Inspiriert durch ...

- Smalltalk
- C++
- ML/Haskell/OCaml/F#

#+BEGIN_NOTES
frühe OO-Sprachen waren ungetypt: Smalltalk, C++
#+END_NOTES

* Lambda (F)

#+begin_src java
Runnable r = () -> System.out.println("Hello from Lambda!");
new Thread(r).start();
#+end_src

#+BEGIN_NOTES
Warum keine Tail-Call-Optimierung?

Fehlende Unterstützung für Mehrzeiler.
#+END_NOTES

** Lambdas als Parameter (F)

Higher Order Functions:

#+begin_src java
List<String> names = List.of("Alice", "Bob", "Charlie");
List<String> upperCaseNames = names.stream()
    .map(name -> {
        System.out.println("Converting: " + name);
        return name.toUpperCase();
    })
    .toList();
System.out.println(upperCaseNames);  // [ALICE, BOB, CHARLIE]
#+end_src

Methodenreferenz:

#+begin_src java
List<String> names = List.of("Alice", "Bob", "Charlie");
names.forEach(System.out::println);
#+end_src


** McCarthy, 1960

#+ATTR_HTML: :class r-stretch
[[file:images/lisp.png]]

** LISP

[[file:images/lisp-lambda.png]]

** Church, 1941

[[file:images/church.png]]

** Lambda-Kalkül

[[file:images/church-lambda.png]]

** Warum hat das so lang gedauert?

**FP**
LISP (1960) ->
ML (1973) / Scheme (1975) / HOPE (1980) ->
Haskell/OCaml/F# (ab 1985)

**PROC**
Algol 60 ->
Pascal (1970) ->
C (1972)

**OOP**
Simula 67 ->
Smalltalk 80 ->
C++ (1985) ->
Java

** "Variable used in lambda expression should be final or effectively final"

#+begin_src java
private TimeZone extractCalendarTimeZoneComponent(Calendar cal, TimeZone calTz) {
    try {
        cal.getComponents().getComponents("VTIMEZONE")
          .forEach(component -> {
            VTimeZone v = (VTimeZone) component;
            v.getTimeZoneId();
            if (calTz == null) {
                calTz = TimeZone.getTimeZone(v.getTimeZoneId().getValue());
            }
        });
    } catch (Exception e) {
        log.warn("Unable to determine ical timezone", e);
    }
    return null;
}
#+end_src

** Was sind Closures?

[[file:images/landin-evaluation.png]]

** Landin, 1964

[[file:images/landin-closure.png]]

** Lambda für funktionale Interfaces, als Callbacks, (F)

#+begin_src java
Function<Integer, Integer> square = x -> x * x;
System.out.println(square.apply(5));  // 25


void processData(List<Integer> data, Consumer<Integer> callback) {
    data.forEach(callback);
}
processData(List.of(1, 2, 3), value -> System.out.println("Processed: " + value));

// Currying
Function<Integer, Function<Integer, Integer>> add = x -> y -> x + y;
System.out.println(add.apply(5).apply(3));  // 8
#+end_src


** Warum gibt es 51 Interfaces in =java.util.function=?

[[file:images/java-util-function.png]]

** Generics und primitive Typen

#+begin_src java

interface Function<T,R> {
    default <V> Function<T,V> andThen(Function<? super R,? extends V> after);
    R apply(T t)
    default <V> Function<V,R> compose(Function<? super V,? extends T> before)
    static <T> Function<T,T> identity()
}

interface DoubleFunction<R> {
    R apply(double value);
}
#+end_src

** Methoden als Objekte

#+begin_src java
int double(Function<Integer, Integer> f, int n) {
   return f.apply(f.apply(n));
}

static Integer inc(Integer n) {
    return n + 1;
}

... double(::inc, 7) ...
#+end_src

** Funktionstypen

"Cannot infer type"

#+begin_src java
var inc = (int x) -> x + 1;
#+end_src

** Funktionen in Haskell

#+begin_src haskell
(.) :: (b -> c) -> (a -> b) -> (b -> c)
f . g = \ a -> f (g a)

double :: (Integer -> Integer) -> Integer -> Integer
double f n = f (f n)

inc :: Integer -> Integer
inc n = n + 1

double inc 7
#+end_src

** Weitere Nahstellen

- =void=
- Statements vs. Ausdrücke
- =yield= vs. =return=

* Java 8: Streams (F)

#+begin_src java
List<String> names = List.of("Alice", "Bob", "Charlie");
List<String> filtered = names.stream()
    .filter(name -> name.startsWith("A"))
    .collect(Collectors.toList());
System.out.println(filtered);  // [Alice]
#+end_src

#+BEGIN_NOTES
Falk: Lambdas wurden ja in Java 8 eingeführt, um die Programmierung
mit Streams zu unterstützen.  Kommen die Streams auch aus der
Lisp-Ecke?

Performance und Debugging: Vorteil oder Frust?

Falk: Lambdas wurden ja in Java 8 eingeführt, um die Programmierung
mit Streams zu unterstützen.  Kommen die Streams auch aus der
Lisp-Ecke?

Performance und Debugging: Vorteil oder Frust?
Vergleich mit funktionalen Paradigmen.
#+END_NOTES

** LISP

[[file:images/lisp-1.png]]

** LISP

[[file:images/lisp-maplist.png]]

** Java 8: Default Methods (F)

#+begin_src java
interface Animal {
    default void eat() {
        System.out.println("Eating...");
    }
}
class Dog implements Animal {}
new Dog().eat();  // Eating...
#+end_src

#+BEGIN_NOTES
Flexibilität vs. Interface-Verschmutzung.

Hätte man Mixins einführen sollen?
#+END_NOTES

** Default Methods in Haskell

#+begin_src haskell
class  Eq a  where
    (==), (/=)           :: a -> a -> Bool

    x /= y               = not (x == y)
    x == y               = not (x /= y)
#+end_src

** Java 9: List.of() - unmodifiable (F)

#+begin_src java
List<String> immutableList = List.of("A", "B", "C");
// immutableList.add("D");  // UnsupportedOperationException
#+end_src

#+BEGIN_NOTES
Warum keine echten Literals wie in Python oder Kotlin?
#+END_NOTES

** HOPE

[[file:images/hope-list.png]]

** Java 21 Sequenced Collections (F)

#+ATTR_HTML: :height 500px;
[[file:images/sequenced_collections.jpg]]

#+REVEAL: split

#+begin_src java
List<Integer> list = new ArrayList<>(List.of(1, 2, 3, 4, 5));
List<Integer> reversed = list.reversed();
System.out.println(reversed); // 5, 4, 3, 2, 1

list.addFirst(0);
list.addLast(6);

System.out.println(list.getFirst()); // 0
System.out.println(list.getLast()); // 6
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** Java 22/24: Stream Gatherers (F)

#+begin_src java
// will contain: [[1, 2, 3], [4, 5, 6], [7]]
List<List<Integer>> windows = Stream.of(1, 2, 3, 4, 5, 6, 7)
  .gather(Gatherers.windowFixed(3))
  .toList();
System.out.println(windows);

// will contain: Optional["12345"]
Optional<String> numberString =
  Stream.of(1, 2, 3, 4, 5)
   .gather(Gatherers.fold(() -> "",
     (string, number) -> string + number))
   .findFirst();
System.out.println(numberString);
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** Java 22/24: Stream Gatherers (F)

#+begin_src java
interface Gatherer<T, A, R> {
    default Supplier<A> initializer() {
        return defaultInitializer();
    };

    Integrator<A, T, R> integrator();

    default BinaryOperator<A> combiner() {
        return defaultCombiner();
    }

    default BiConsumer<A, Downstream<? super R>> finisher() {
        return defaultFinisher();
    };
}
#+end_src

#+BEGIN_NOTES
A gatherer is defined by four functions that work together:
The optional initializer function provides an object that maintains private state while processing stream elements. For example, a gatherer can store the current element so that, the next time it is applied, it can compare the new element with the now-previous element and, say, emit only the larger of the two. In effect, such a gatherer transforms two input elements into one output element.
The integrator function integrates a new element from the input stream, possibly inspecting the private state object and possibly emitting elements to the output stream. It can also terminate processing before reaching the end of the input stream; for example, a gatherer searching for the largest of a stream of integers can terminate if it detects Integer.MAX_VALUE.
The optional combiner function can be used to evaluate the gatherer in parallel when the input stream is marked as parallel. If a gatherer is not parallel-capable then it can still be part of a parallel stream pipeline, but it is evaluated sequentially. This is useful for cases where an operation is inherently ordered in nature and thus cannot be parallelized.
The optional finisher function is invoked when there are no more input elements to consume. This function can inspect the private state object and, possibly, emit additional output elements. For example, a gatherer searching for a specific element amongst its input elements can report failure, say by throwing an exception, when its finisher is invoked.
#+END_NOTES

* Typen
** Generics

#+begin_src java
List<String> list = new ArrayList<>();
list.add("Hello");
// Compile-Time-Sicherheit
String value = list.get(0);  // Kein Cast nötig
#+end_src

#+BEGIN_NOTES
Warum gibt es keine Generics für primitive Typen?

Type Erasure: Einschränkung oder Vorteil?


#+END_NOTES

** Generics

[[file:images/gj.png]]

** Warum kein =ArrayList<int>=?

#+begin_src java
class LinkedList<A> {
    protected class Node {
        A elt;
        Node next = null;

        Node(A elt) {
            this.elt = elt;
        }
    }
    protected Node head = null, tail = null;
    ...
}
#+end_src

** Type Erasure

#+begin_src java
class LinkedList implements Collection {
    protected class Node {
        Object elt;
        Node next = null;

        Node (Object elt) {
            this.elt = elt;
        }
    }
    protected Node head = null, tail = null;
    ...
}
#+end_src

** Parametrische Polymorphie

[[file:images/strachey.png]]

** Strachey, 1967

[[file:images/parametric-polymorphism.png]]

** ML

[[file:images/milner.png]]

** Parametricity

#+begin_src java
interface Stream<T> {
    <U> Stream<U> map(Function<T, U> f);
}
#+end_src

** Hätte, Hätte

"Cannot access class object of a type parameter"

#+begin_src java
public <T> T sum(ArrayList<T> list) {
    if (T.class == Integer.class) {
	int result = 0;
	...
	return new result;
    } else if (T.class == Float.class) {
	float result = 0;
	...
	return result;
    } else ...
}
#+end_src

** Fahrradkette

#+begin_src java
interface NumOps<T> {
    T zero();
    T plus(T t1, T t2);
    ...
}
    
class ArrayList<T> {
    T sum(automatic NumOps<T> ops) {
       T result = ops.zero();
       for (T element: this) {
          result = ops.plus(result, element);
       }
       return result;
    }
}
#+end_src

** Local variable type inference

#+begin_src java
ArrayList<Foo> list = new ArrayList<Foo>();
    ->
var list = Lists.of(new Foo());
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** Damas/Milner 1982

[[file:images/damas-milner.png]]

** Warum hat das so lange gedauert?

#+begin_src java
interface Stream<R> {
  <R> Stream<R> map(Function<? super T,? extends R> mapper);
}
#+end_src

#+begin_src java
class A { }
class B extends A {}

...
    A[] as = new B[10];
    A a = as[0];
    as[0] = new A();
...
#+end_src

** Java 8: Optional (F)

#+begin_src java
Optional<String> name = Optional.of("Alice");
name.ifPresent(System.out::println);  // Alice
#+end_src

#+BEGIN_NOTES
Mike: Übrigens, Falk, wo wir gerade bei ML sind, das hier kommt auch von da
#+END_NOTES

** Optional

Haskell

#+begin_src haskell
data Maybe a = Nothing | Just a
#+end_src

Standard ML

#+begin_src sml
datatype 'a option = NONE | SOME of 'a
#+end_src

OCaml

#+begin_src ocaml
type 'a t = 'a option = 
| None
| Some of 'a
#+end_src

(SML/NJ 1993)

** Nullable Types

#+begin_src java
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** SQL, 1974

#+begin_src sql
CREATE TABLE orders
( order_id int NOT NULL,
  customer_id int,
  order_date date,
);
#+end_src

** Records

#+begin_src java
record Point(int x, int y) {}

Point p = new Point(1, 2);
System.out.println(p.x());
#+end_src

#+REVEAL: split

#+begin_src java
public record MonetaryAmount(BigDecimal value, 	Currency currency) {}
#+end_src

Im Bytecode:

#+begin_src sh
javap MonetaryAmount.class
Compiled from "MonetaryAmount.java"
public final class de.sippsack.records.MonetaryAmount extends java.lang.Record {
  public de.sippsack.records.MonetaryAmount(java.math.BigDecimal, java.util.Currency);
  public final java.lang.String toString();
  public final int hashCode();
  public final boolean equals(java.lang.Object);
  public java.math.BigDecimal value();
  public java.util.Currency currency();
}
#+end_src

#+BEGIN_NOTES
Falk: Dann müßtest Du ja Records toll finden, das ist ja sowas wie
algebraische Datentypen in Haskell.
#+END_NOTES

#+begin_src java

#+end_src

** ALGOL W (1966)

[[file:images/algol-w.png]]

** ALGOL W

[[file:images/algol-w-record.png]]

** Alles über Daten und Typen, 1985

[[file:images/cardelli-wegner.png]]

** Functional Update

#+begin_src haskell
data Dillo = MkDillo { dilloLiveness :: Liveness,
                       dilloWeight :: Weight }

runOverDillo dillo = dillo { dilloLiveness = Dead }
#+end_src

** Sealed Classes

#+begin_src java
sealed interface Animal {
    record Dillo(Liveness liveness, Weight weight)
      implements Animal {}
    record Parrot(String sentence, Weight weight)
      implements Animal {}
}
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** Haskell

#+begin_src haskell
data Animal =
    MkDillo { dilloLiveness :: Liveness, dilloWeight :: Weight }
  | MkParrot { parrotSentence:: String, parrotWeight :: Weight }
  deriving Show
#+end_src

** ISWIM

[[file:images/iswim.png]]

https://dl.acm.org/doi/10.1145/365230.365257

** ISWIM

[[file:images/iswim-adt.png]]

** CLU

[[file:images/clu.png]]

https://pmg.csail.mit.edu/ftp.lcs.mit.edu/pub/pclu/CLU/3.Documents/MIT-LCS-TR-225.pdf

** CLU (1979)

[[file:images/clu-oneof.png]]

** HOPE (1980)

[[file:images/hope.png]]

** HOPE

[[file:images/hope-data.png]]

** Java ?: Value Types

Project Valhalla - "Codes like a class, works like an int."

#+begin_src java
value class USDCurrency implements Comparable<USDCurrency> {
    private int cs; // implicitly final
    private USDCurrency(int cs) { this.cs = cs; }

    public USDCurrency(int dollars, int cents) {
        this(dollars * 100 + (dollars < 0 ? -cents : cents));
    }

    public int dollars() { return cs/100; }
    public int cents() { return Math.abs(cs%100); }

    public USDCurrency plus(USDCurrency that) {
        return new USDCurrency(cs + that.cs);
    }

    public int compareTo(USDollars that) { ... }
    public String toString() { ... }
}
#+end_src

#+REVEAL: split

#+begin_src java
value record Color(byte red, byte green, byte blue) {
    public Color(int r, int g, int b) {
        this(checkByte(r), checkByte(g), checkByte(b));
    }

    private static byte checkByte(int x) {
        if (x < 0 || x > 255) throw new IllegalArgumentException();
        return (byte) (x & 0xff);
    }

    public Color mix(Color that) {
        return new Color(avg(red, that.red),
                         avg(green, that.green),
                         avg(blue, that.blue));
    }

    private static byte avg(byte b1, byte b2) {
        return (byte) (((b1 & 0xff) + (b2 & 0xff)) / 2);
    }
}
#+end_src

#+begin_src java
#+end_src

#+BEGIN_NOTES
#+END_NOTES

* Pattern-Matching

** Java 12: Switch Expressions (F)

#+begin_src java
String developerRating( int numberOfChildren ) {
  return switch (numberOfChildren) {
    case 0 -> "open source contributor";
    case 1, 2 -> "junior";
    case 3 -> "senior";
    default -> {
      if (numberOfChildren < 0)
        throw new IndexOutOfBoundsException( numberOf… );
      yield "manager";
    }
  };
}
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** Java 15: Type Patterns (F)

#+begin_src java
private static boolean isNullOrEmpty(Object o) {
    return o == null ||
           o instanceof String s && s.isBlank() ||
           o instanceof Collection c && c.isEmpty();
}
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** CLU

[[file:images/clu-tagcase.png]]

** Java 17: Pattern-Matching in switch (F)

#+begin_src java
String evaluateTypeWithSwitch( Object o ) {
  return switch(o) {
    case String s -> "String: " + s;
    case Collection c -> "Collection: " + c;
    default -> "Something else: " + o;
  };
}
#+end_src

#+begin_src java
boolean isNullOrEmptyWithSwitch( Object o ) {
  return switch(o) {
    case null -> true;
    case String s when s.isBlank() -> true;
    case String s -> false;
    case Collection c when c.isEmpty() -> true;
    default -> false;
  };
}
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** LISP

[[file:images/lisp-mcbride.png]]

https://personal.cis.strath.ac.uk/conor.mcbride/FVMcB-PhD.pdf

** McBride, 1970

[[file:images/mcbride-pattern-matching.png]]

** HOPE, 1980

[[file:images/hope-pattern-matching.png]]

** Record Patterns (F)

#+begin_src java
record Point(int x, int y) {}

void printSum(Object o) {
    if (o instanceof Point(int x, int y)) {
        System.out.println(x + y);
    }
}
#+end_src

#+REVEAL: split

#+begin_src java
record Point(int x, int y) {}
enum Color { RED, GREEN, BLUE }
record ColoredPoint(Point p, Color c) {}
record Rectangle(ColoredPoint cp1, ColoredPoint cp2) {}

static void printColorOfUpperLeftPoint(Rectangle r) {
  if (r instanceof Rectangle(
		ColoredPoint(
			Point(int x, int y) p,
			Color c),
        	ColoredPoint cp2)) {
    System.out.println(c);
  }
}
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** Java 21: Unnamed Patterns, Variables (F)


#+begin_src java
static <T> boolean contains(T value, LinkedList<T> list) {
  return switch (list) {
    case Empty _ -> false;
    case Element<T>(T v, _)
      when Objects.equals(v, value) -> true;
    case Element<T>(_, var tail) -> contains(value, tail);
  };
}
#+end_src

#+BEGIN_NOTES
#+END_NOTES

** Java 23: Primitive Types in Patterns

#+begin_src java
// dominierender vor dominierten Typ geht nicht (int vor byte)
value = 10;
switch (value) {
    // case int _ -> System.out.println(value + " instanceof int");
    case byte _ -> System.out.println(value + " instanceof byte");
    case int _ -> System.out.println(value + " instanceof int");
}

#+end_src

#+BEGIN_NOTES
#+END_NOTES

* Was gab's noch

- Futures
- /default methods/
- Modulsystem
- virtuelle Threads
- /structured concurrency/
- /scoped values/
- /string templates/
- /statements before super/
- /implicitly declared classes/, /instance main methods/
- /flexible constructor bodies/

** Entwicklungslinien

**FP**
LISP (1960) ->
ML (1973) / Scheme (1975) / HOPE (1980)
Haskell/OCaml/F# (ab 1985)

**PROC**
Algol 60 ->
Pascal (1970) ->
C (1972) ->
Java (1995)

**OOP**
Simula 67 ->
Smalltalk 80 ->
C++ (1985) ->
Java

** Woher

| defaultmethods         | Haskell    | FP      |  1991 |
| Generics               | ML         | FP      |  1977 |
| Lambda                 | LISP       | FP      |  1959 |
| Listen/map             | LISP       | FP      |  1960 |
| Stream Gatherers       | Haskell    | FP      |  2005 |
| Typinferenz            | ML         | FP      |  1977 |
| Records                | ALGOL W/ML | PROC/FP |  1966 |
| Sealed Interfaces      | ML/Haskell | FP      |  1980 |
| Futures                | Scheme     | FP      |  1976 |
| Virtual Threads        | Scheme     | FP      | ~1980 |
| Structured Concurrency | Erlang     | FP      | ~1990 |
| Scoped Values          | LISP       | FP      |  1959 |
| Modulsystem            | (ML)       | (FP)    |  1990 |

** Was kommt noch?

- Value types
- Generics over Primitive Types
- Nullable Types

* Was hat Haskell, was ich nicht habe?

** Funktionstypen

#+begin_src haskell
map :: (a -> b) -> [a] -> [b]
#+end_src

** Uniforme Generics

#+begin_src haskell
map (+1) [1,2,3,4,5,6]
#+end_src

** Tupel

#+begin_src haskell
div_mod :: Integer -> Integer -> (Integer, Integer)
div_mod a b = (a `div` b, a `mod b`)
#+end_src

** Either

#+begin_src haskell
data Either a b
  = Left a
  | Right b 

data ParseDigitError
  = NotADigit Char
  deriving Show

parseDigit :: Char -> Either ParseDigitError Int
parseDigit c =
  case c of
    '0' -> Right 0
    '1' -> Right 1
    '2' -> Right 2
    '3' -> Right 3
    '4' -> Right 4
    '5' -> Right 5
    '6' -> Right 6
    '7' -> Right 7
    '8' -> Right 8
    '9' -> Right 9
    _ -> Left (NotADigit c)
#+end_src

** Tail Calls

#+begin_src haskell
rev [] acc = acc
rec (x:xs) acc = rev xs (x:acc)
#+end_src

** Tail Calls

[[file:images/guy-steele-tail-calls.png]]

** Scheme, Tail Calls

[[file:images/ltu.png]]

** Guy Steele

[[file:images/guy-steele-java.png]]

** Typklassen/Implicits

#+begin_src haskell
class Semigroup a where
  -- combine (combine x y) z == combine x (combine y z)
  combine :: a -> a -> a

class Semigroup a => Monoid a where
  -- combine neutral x == combine x neutral == x
  neutral :: a

foldMonoid :: Monoid b => [b] -> b
foldMonoid list = foldr combine neutral list
#+end_src

* Vielen Dank

Fragen
